#! /usr/bin/python3
#
# Generates login links for a BigBlueButton server using the
# bbb-auth-jwt service for authentication.

import os
import sys
import jwt
import socket
import sqlite3
from datetime import datetime
import dateutil.parser
import argparse
import cryptography.hazmat.backends.openssl.backend
from cryptography.hazmat.primitives import serialization

CONF_FILE='/etc/bigbluebutton/bbb-auth-jwt'

# The filename of the SQLite3 database used to obtain the API gateway URLs
#    (how to open files in the same directory as the script, from https://stackoverflow.com/a/4060259/1493790)

__location__ = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))
SQLITE3_DATABASE = os.path.join(__location__, '../bbb-auth.sqlite')

local_timezone = datetime.now().astimezone().tzinfo

parser = argparse.ArgumentParser(description='Generate login URL for a Big Blue Button server')
parser.add_argument('-e', '--expiration-time', type=str, required=True,
                    help="expiration time of tokens (or 'never'; defaults to midnight in local timezone if only date is given)")
parser.add_argument('-m', '--moderator', action="store_true",
                    help='generate moderator tokens')
parser.add_argument('-M', '--meeting', action='store', help='meeting name (default is default meeting)')
parser.add_argument('-d', '--debug', action="store_true", help="print exact JWT being encoded")
parser.add_argument('-i', '--identity', type=str, default="~/.ssh/id_rsa", help="filename with RSA key")
parser.add_argument('-u', '--url', type=str, help="endpoint URL")
parser.add_argument('-n', '--server-name', type=str, help="name of server (only used to start a hibernated AWS server)")
parser.add_argument('name')
args = parser.parse_args()

# always use RSA keys now
args.rsa = True

if args.expiration_time == 'never':
    exp = None
else:
    try:
        exp = dateutil.parser.parse(args.expiration_time)
        if exp.tzinfo is None:
            exp = exp.replace(tzinfo = local_timezone)
    except:
        raise Exception("Can't parse expiration time")

# If the CONF_FILE exists, read parameters, most importantly JWT_KEY
# and LOGIN_URL from it, that can override everything below.

if os.path.isfile(CONF_FILE):
    exec(open(CONF_FILE).read())

# If rsa encryption wasn't specified and JWT_KEY wasn't set in
# the CONF_FILE, try to use the local Big Blue Button's
# shared secret as a key.
#
# This allows us to configure this script to generate keys for a
# remote server while falling back to the local server by default.
#
# The 'bigbluebutton' package only needs to be installed if we're
# not using RSA and we don't have configuration info in CONF_FILE.

if args.rsa:
    with open(os.path.expanduser(args.identity)) as key_file:
        JWT_KEY = serialization.load_pem_private_key(key_file.read().encode(), password=None, backend=cryptography.hazmat.backends.openssl.backend)
        algorithm = 'RS512'
elif 'JWT_KEY' not in vars():
    import bigbluebutton
    JWT_KEY = bigbluebutton.securitySalt()
    algorithm = None

# If url wasn't specified as an argument and wasn't specified
# in CONF_FILE, try to read it from a SQL database that contains
# server-to-url mappings.  If that doesn't work, use the local
# machines's Fully Qualified Domain Name (FQDN).
#
# If we're running this script on the BigBlueButton server,
# we only need to override the FQDN if we want this user
# to connect through an AWS lambda function to start the
# server when it's stopped.

if args.url:
    LOGIN_URL = args.url + '?'
elif 'LOGIN_URL' not in vars():
    try:
        conn = sqlite3.connect(SQLITE3_DATABASE)
        c = conn.cursor()
        c.execute("SELECT url FROM servers WHERE name = ?", (args.server_name,))
        url = c.fetchone()[0]
        LOGIN_URL = url + '?'
    except:
        LOGIN_URL = 'https://' + socket.getfqdn() + '/login/'


if args.moderator:
    role = 'm'
else:
    role = 'v'

if exp:
    message = {'sub' : args.name, 'role' : role, 'exp' : exp}
else:
    message = {'sub' : args.name, 'role' : role}

if args.meeting:
    message['mtg'] = args.meeting
if args.server_name:
    message['nam'] = args.server_name

if args.debug:
    print('Expiration time:', exp.strftime('%c %Z') if exp else 'never')
    print(message)

if algorithm:
    JWT = jwt.encode(message, JWT_KEY, algorithm=algorithm)
else:
    JWT = jwt.encode(message, JWT_KEY)

print(LOGIN_URL + JWT.decode())
