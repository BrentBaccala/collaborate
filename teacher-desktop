#!/usr/bin/python3
#
# Usage: teacher-desktop MAX-DIMENSION MIN-DIMENSION IS-TEACHER-FLAG X-DESKTOP-NUMBER USER-NAME

import subprocess
import sys
import os
import json

VIEWONLY_VIEWER = "/home/baccala/src/ssvnc-1.0.29/vnc_unixsrc/vncviewer/vncviewer"
XKEY = "/home/baccala/src/xkey"
FS_CLI = "/opt/freeswitch/bin/fs_cli"

import sqlite3
conn = sqlite3.connect('/home/baccala/vnc.db')

c = conn.cursor()

DISPLAYS = []
NAMES = []

def get_DISPLAYS_and_NAMES_from_SQL():

    # Due to the design of this query, we only get student names, not teachers

    SQL_results = c.execute('SELECT display,name FROM Desktops WHERE name NOT LIKE "%DCPS%"');
    DISPLAYS.clear()
    NAMES.clear()

    for row in SQL_results:
        display = 'osito:' + str(row[0])
        DISPLAYS.append(display)
        NAMES.append(row[1])

freeswitch_ids = {}
conference = None

def get_freeswitch_ids():

    #
    # Fetch freeswitch conference data and map names to freeswitch id numbers
    #
    # We ONLY save student ids, because we don't want to mute/unmute teachers at all
    #

    global conference

    freeswitch_process = subprocess.Popen([FS_CLI, '-x', 'conference json_list'], stdout=subprocess.PIPE)
    (stdoutdata, stderrdata) = freeswitch_process.communicate()
    try:
        conference = json.loads(stdoutdata.decode())
    except:
        conference  = []

    freeswitch_ids.clear()

    if len(conference) > 0:
        for member in conference[0]['members']:
            try:
                member_name = member['caller_id_name'].split('-bbbID-')[1]
                id = member['id']
                if 'DCPS' not in member_name:
                    freeswitch_ids[member_name] = id
            except:
                pass

def freeswitch_cmd(cmd):
    freeswitch_process = subprocess.Popen([FS_CLI, '-x', cmd])
    freeswitch_process.wait()

def freeswitch_conference_cmd(*cmd):
    freeswitch_cmd('conference ' + conference[0]['conference_name'] + ' ' + ' '.join(map(str,cmd)))

def freeswitch_set_broadcast():
    for id in freeswitch_ids.values():
        freeswitch_conference_cmd('undeaf', id)
        freeswitch_conference_cmd('unmute', id)

def freeswitch_set_silence():
    for id in freeswitch_ids.values():
        freeswitch_conference_cmd('deaf', id)
        freeswitch_conference_cmd('mute', id)

def freeswitch_set_private(student_name):
    for id in freeswitch_ids.values():
        if student_name in freeswitch_ids and freeswitch_ids[student_name] == id:
            freeswitch_conference_cmd('undeaf', id)
            freeswitch_conference_cmd('unmute', id)
        else:
            freeswitch_conference_cmd('deaf', id)
            freeswitch_conference_cmd('mute', id)

def freeswitch_unmute_student(student_name):
    if student_name in freeswitch_ids:
        freeswitch_conference_cmd('undeaf', freeswitch_ids[student_name])
        freeswitch_conference_cmd('unmute', freeswitch_ids[student_name])

def freeswitch_mute_student(student_name):
    if student_name in freeswitch_ids:
        freeswitch_conference_cmd('deaf', freeswitch_ids[student_name])
        freeswitch_conference_cmd('mute', freeswitch_ids[student_name])


def main_loop():

    get_DISPLAYS_and_NAMES_from_SQL()
    get_freeswitch_ids()

    processes = []

    SCREENX = int(sys.argv[1])
    SCREENY = int(sys.argv[2])

    SCALEX = int(SCREENX * .49)
    SCALEY = int(SCREENY * .49)
    SCALE = str(SCALEX) + "x" + str(SCALEY)

    MIDPOINTX = str(int(SCREENX * .5))
    MIDPOINTY = str(int(SCREENY * .5))

    GEOMETRY = ('+0+0', '+'+MIDPOINTX+'+0', '+0+'+MIDPOINTY, '+'+MIDPOINTX+'+'+MIDPOINTY)

    cols = 2

    for i,display in enumerate(DISPLAYS):
        row = int(i/cols)
        col = i%cols
        geox = int(col * SCREENX/cols + .005*SCREENX)
        geoy = int(row * SCREENY/cols + .005*SCREENY)
        args = [VIEWONLY_VIEWER, '-viewonly', '-geometry', '+'+str(geox)+'+'+str(geoy),
                '-scale', SCALE, '-passwd', '/home/baccala/.vnc/passwd', display]
        processes.append(subprocess.Popen(args))

    freeswitch_set_silence()

    FULLSCREEN_GEOMETRY = str(SCREENX) + 'x' + str(SCREENY)

    while True:
        xkey_process = subprocess.Popen([XKEY, os.environ['DISPLAY']], stdout=subprocess.PIPE)
        (stdoutdata, stderrdata) = xkey_process.communicate()
        # print('stdoutdata:', stdoutdata, stderrdata)
        if stdoutdata:
            lines = stdoutdata.decode().split()
            if (len(lines) > 0) :
                # print(lines[0])
                if lines[0].isdigit():
                    xkey_digit = int(lines[0])
                    # print('xkey_digit:', xkey_digit)
                    if ((xkey_digit > 0) and (xkey_digit <= len(DISPLAYS))):
                        viewer = subprocess.Popen(['ssvncviewer', '-geometry', FULLSCREEN_GEOMETRY, '-scale', FULLSCREEN_GEOMETRY, '-escape', 'Alt_L',
                                               '-passwd', '/home/baccala/.vnc/passwd', DISPLAYS[xkey_digit-1]]);
                        freeswitch_unmute_student(NAMES[xkey_digit-1])
                        viewer.wait()
                        freeswitch_mute_student(NAMES[xkey_digit-1])
                if lines[0] == 'b':
                    freeswitch_set_broadcast()
                if lines[0] == 's':
                    freeswitch_set_silence()
                if lines[0] == 'r':
                    break

while True:
    main_loop()
