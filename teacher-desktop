#!/usr/bin/python3
#
# Usage: teacher-desktop MAX-DIMENSION MIN-DIMENSION IS-TEACHER-FLAG X-DESKTOP-NUMBER USER-NAME

import subprocess
import sys
import os
import json
import math
import time

VIEWONLY_VIEWER = "/home/baccala/src/ssvnc-1.0.29/vnc_unixsrc/vncviewer/vncviewer"
XKEY = "/home/baccala/src/osito/xkey"
SIMPLE_TEXT = "/home/baccala/src/osito/simple_text.py"
FVWM_CONFIG = "/home/baccala/src/osito/teacher-fvwm-config"
VNCDB = "/home/baccala/vnc.db"

import sqlite3
conn = sqlite3.connect(VNCDB)

c = conn.cursor()

DISPLAYS = []
NAMES = dict()

def get_DISPLAYS_and_NAMES_from_SQL():

    # Due to the design of this query, we only get student names, not teachers

    #SQL_results = c.execute('SELECT display,name FROM Desktops WHERE name NOT LIKE "%DCPS%"');
    SQL_results = c.execute('SELECT display,name FROM Desktops WHERE name != "Teacher" AND name NOT LIKE "%DCPS%"');
    DISPLAYS.clear()
    NAMES.clear()

    for row in SQL_results:
        display = 'osito:' + str(row[0])
        DISPLAYS.append(display)
        NAMES[display] = row[1]

# 'processes' maps display names to a list of processes associated
# with them.  Each one will have a vncviewer and a Tk label.

processes = dict()

# 'locations' maps display names to their location in the on-screen grid.

locations = dict()

def main_loop():

    global processes
    global locations

    get_DISPLAYS_and_NAMES_from_SQL()

    VALID_DISPLAYS = []
    for display in DISPLAYS:
        SQL_results = list(c.execute('SELECT count FROM Connections WHERE display = ?', [display]))
        if len(SQL_results) > 0 and SQL_results[0][0] > 0:
            VALID_DISPLAYS.append(display)

    old_cols = math.ceil(math.sqrt(len(locations)))
    cols = math.ceil(math.sqrt(len(VALID_DISPLAYS)))

    print('cols:',old_cols,cols)

    # If the number of clients changed enough to require a resize of
    # the entire display grid, kill all of our old processes,
    # triggering a rebuild of the entire display.

    if old_cols != cols:
        for procs in processes.values():
            for proc in procs:
                proc.kill()
        processes.clear()
        locations.clear()

    if cols > 0:

        SCREENX = int(sys.argv[1])
        SCREENY = int(sys.argv[2])

        SCALEX = int(SCREENX/cols - .01*SCREENX)
        SCALEY = int(SCREENY/cols - .01*SCREENY)

        SCALE = str(SCALEX) + "x" + str(SCALEY)

        for display in VALID_DISPLAYS:
            if display not in processes:
                # pick the first screen location not already claimed in locations
                i = [i for i in range(len(VALID_DISPLAYS)) if i not in locations.values()][0]
                locations[display] = i

                processes[display] = []
                row = int(i/cols)
                col = i%cols
                geox = int(col * SCREENX/cols + .005*SCREENX)
                geoy = int(row * SCREENY/cols + .005*SCREENY)
                args = [VIEWONLY_VIEWER, '-viewonly', '-geometry', '+'+str(geox)+'+'+str(geoy),
                        '-scale', SCALE, '-passwd', '/home/baccala/.vnc/passwd', display]
                processes[display].append(subprocess.Popen(args))

                args2 = [SIMPLE_TEXT, str(i+1) + ". " + NAMES[display], str(int(geox + SCREENX/cols/2)), str(geoy)]
                processes[display].append(subprocess.Popen(args2))



args = ["fvwm", "-f", FVWM_CONFIG]
subprocess.Popen(args)

while True:
    dbstat = os.stat(VNCDB)
    main_loop()
    while True:
        current_dbstat = os.stat(VNCDB)
        #print(current_dbstat.st_mtime)
        if current_dbstat.st_mtime != dbstat.st_mtime:
            break
        time.sleep(.1)
